const webdriver = require("selenium-webdriver"); // Selenium package for interacting with the browser
const chrome = require("selenium-webdriver/chrome");
const firefox = require("selenium-webdriver/firefox");
const assert = require("assert"); // Used to evaluate tests
const request = require("supertest"); // HTTP requests library for interacting with Mailsac API

const mailsacAPIKey = ""; // Generated by mailsac. See https://mailsac.com/api-keys
const webappUrl = "http://localhost:8080/index.html" // location of webapp
const signupEmailAddress = "user1@mailsac.com"; // email for user signup, check via mailsac API
const privateAddress = false; // If using a private Mailsac address the tests will delete all the messages in the inbox after running, prevents leaky tests.

const wait = (millis) => new Promise((resolve) => setTimeout(resolve, millis));

let mod= require("http-server");
const port= 8080;
let server = mod.createServer();

const driver = new webdriver.Builder()
  .forBrowser("firefox")
  .setChromeOptions(/* ... */)
  .setFirefoxOptions(/* ... */)
  .build();

describe('http-server', function () {
 before(() =>{
   server.listen(port); // start webserver before running tests
 });
  after(() => {
    server.close() // stop webserver after running tests
  });
  describe("register new user", function () {
    this.timeout(50000); // test can take a long time to run. This increases the default timeout for mocha

    /* delete all messages in the inbox after the test runs to prevent leaky tests.
       This requires the inbox to private, which is a paid feature of Mailsac.
       The afterEach section could be omitted if using a public address
    */
    afterEach(() => {
        if (privateAddress) {
          request("https://mailsac.com")
            .delete(`/api/addresses/${signupEmailAddress}/messages`)
            .set("Mailsac-Key", mailsacAPIKey)
            .expect(204)
        }
      }
    );

    afterEach(async () =>
      await driver.quit() // quits the selenium webdriver after each test.
    )

    it("sends email with link to example.com website", async () => {
      await driver.get(webappUrl); // opens web browser using the webappUrl
      await driver.findElement(webdriver.By.id("username")).sendKeys("webdriver", "ExampleUser"); // find element "username" and enters the tet "ExampleUser"
      await driver.findElement(webdriver.By.id("email")).sendKeys("webdriver", signupEmailAddress); // find element "email" and enters the value for the variable signupEmailAddress (ie user1@mailsac.com)
      await driver.findElement(webdriver.By.id("submitUserCreation")).click(); // click the submit button on the form
      // Check email in the inbox 10x, waiting 5 secs in between. Once we find mail, abort the loop.
      let messages = [];
      for (let i = 0; i < 10; i++) {
        // returns the JSON array of email message objects from mailsac.
        const res = await request("https://mailsac.com")
          .get(`/api/addresses/${signupEmailAddress}/messages`)
          .set("Mailsac-Key", mailsacAPIKey);
        messages = res.body;
        if (messages.length > 0) {
          break;
        }
        await wait(4500);
      }
      assert(messages.length, "Never received messages!");
      // After a message is retrieved from mailsac, the JSON object is checked to see if the link was parsed from the email and it is the correct link
      const link = messages[0].links.find((l) => "https://example.com");
      assert(link, "Missing / Incorrect link in email");
    })
  })
})


